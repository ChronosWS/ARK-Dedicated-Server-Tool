//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ASMWebAPI.UnitTests.Server {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServerInfo", Namespace="http://schemas.datacontract.org/2004/07/ASMWebAPI.Models")]
    [System.SerializableAttribute()]
    public partial class ServerInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MapField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MaxPlayersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PlayerCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ASMWebAPI.UnitTests.Server.PlayerInfo[] PlayersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Version VersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Map {
            get {
                return this.MapField;
            }
            set {
                if ((object.ReferenceEquals(this.MapField, value) != true)) {
                    this.MapField = value;
                    this.RaisePropertyChanged("Map");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxPlayers {
            get {
                return this.MaxPlayersField;
            }
            set {
                if ((this.MaxPlayersField.Equals(value) != true)) {
                    this.MaxPlayersField = value;
                    this.RaisePropertyChanged("MaxPlayers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PlayerCount {
            get {
                return this.PlayerCountField;
            }
            set {
                if ((this.PlayerCountField.Equals(value) != true)) {
                    this.PlayerCountField = value;
                    this.RaisePropertyChanged("PlayerCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ASMWebAPI.UnitTests.Server.PlayerInfo[] Players {
            get {
                return this.PlayersField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayersField, value) != true)) {
                    this.PlayersField = value;
                    this.RaisePropertyChanged("Players");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Version Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerInfo", Namespace="http://schemas.datacontract.org/2004/07/ASMWebAPI.Models")]
    [System.SerializableAttribute()]
    public partial class PlayerInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan TimeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan Time {
            get {
                return this.TimeField;
            }
            set {
                if ((this.TimeField.Equals(value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Server.IServer")]
    public interface IServer {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServer/CheckServerStatusA", ReplyAction="http://tempuri.org/IServer/CheckServerStatusAResponse")]
        bool CheckServerStatusA(System.Net.IPEndPoint endpoint);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServer/CheckServerStatusA", ReplyAction="http://tempuri.org/IServer/CheckServerStatusAResponse")]
        System.Threading.Tasks.Task<bool> CheckServerStatusAAsync(System.Net.IPEndPoint endpoint);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServer/CheckServerStatusB", ReplyAction="http://tempuri.org/IServer/CheckServerStatusBResponse")]
        bool CheckServerStatusB(string ipString, int port);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServer/CheckServerStatusB", ReplyAction="http://tempuri.org/IServer/CheckServerStatusBResponse")]
        System.Threading.Tasks.Task<bool> CheckServerStatusBAsync(string ipString, int port);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServer/GetServerInfoA", ReplyAction="http://tempuri.org/IServer/GetServerInfoAResponse")]
        ASMWebAPI.UnitTests.Server.ServerInfo GetServerInfoA(System.Net.IPEndPoint endpoint);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServer/GetServerInfoA", ReplyAction="http://tempuri.org/IServer/GetServerInfoAResponse")]
        System.Threading.Tasks.Task<ASMWebAPI.UnitTests.Server.ServerInfo> GetServerInfoAAsync(System.Net.IPEndPoint endpoint);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServer/GetServerInfoB", ReplyAction="http://tempuri.org/IServer/GetServerInfoBResponse")]
        ASMWebAPI.UnitTests.Server.ServerInfo GetServerInfoB(string ipString, int port);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServer/GetServerInfoB", ReplyAction="http://tempuri.org/IServer/GetServerInfoBResponse")]
        System.Threading.Tasks.Task<ASMWebAPI.UnitTests.Server.ServerInfo> GetServerInfoBAsync(string ipString, int port);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServerChannel : ASMWebAPI.UnitTests.Server.IServer, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServerClient : System.ServiceModel.ClientBase<ASMWebAPI.UnitTests.Server.IServer>, ASMWebAPI.UnitTests.Server.IServer {
        
        public ServerClient() {
        }
        
        public ServerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool CheckServerStatusA(System.Net.IPEndPoint endpoint) {
            return base.Channel.CheckServerStatusA(endpoint);
        }
        
        public System.Threading.Tasks.Task<bool> CheckServerStatusAAsync(System.Net.IPEndPoint endpoint) {
            return base.Channel.CheckServerStatusAAsync(endpoint);
        }
        
        public bool CheckServerStatusB(string ipString, int port) {
            return base.Channel.CheckServerStatusB(ipString, port);
        }
        
        public System.Threading.Tasks.Task<bool> CheckServerStatusBAsync(string ipString, int port) {
            return base.Channel.CheckServerStatusBAsync(ipString, port);
        }
        
        public ASMWebAPI.UnitTests.Server.ServerInfo GetServerInfoA(System.Net.IPEndPoint endpoint) {
            return base.Channel.GetServerInfoA(endpoint);
        }
        
        public System.Threading.Tasks.Task<ASMWebAPI.UnitTests.Server.ServerInfo> GetServerInfoAAsync(System.Net.IPEndPoint endpoint) {
            return base.Channel.GetServerInfoAAsync(endpoint);
        }
        
        public ASMWebAPI.UnitTests.Server.ServerInfo GetServerInfoB(string ipString, int port) {
            return base.Channel.GetServerInfoB(ipString, port);
        }
        
        public System.Threading.Tasks.Task<ASMWebAPI.UnitTests.Server.ServerInfo> GetServerInfoBAsync(string ipString, int port) {
            return base.Channel.GetServerInfoBAsync(ipString, port);
        }
    }
}
